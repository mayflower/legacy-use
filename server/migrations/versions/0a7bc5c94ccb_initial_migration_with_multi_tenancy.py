"""initial_migration_with_multi_tenancy

Revision ID: 0a7bc5c94ccb
Revises:
Create Date: 2025-07-30 17:16:57.665564

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0a7bc5c94ccb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create schemas first
    op.execute('CREATE SCHEMA IF NOT EXISTS shared')
    op.execute('CREATE SCHEMA IF NOT EXISTS tenant_default')

    op.create_table(
        'tenants',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('schema', sa.String(length=256), nullable=False),
        sa.Column('host', sa.String(length=256), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('host'),
        sa.UniqueConstraint('schema'),
        schema='shared',
    )
    op.create_index(
        op.f('ix_shared_tenants_name'),
        'tenants',
        ['name'],
        unique=True,
        schema='shared',
    )

    # Insert default tenant
    op.execute("""
        INSERT INTO shared.tenants (id, name, schema, host, created_at, updated_at, is_active)
        VALUES (
            gen_random_uuid(),
            'Default Tenant',
            'tenant_default',
            'tenant-default.legacy-use.az.mayflower.cloud',
            NOW(),
            NOW(),
            TRUE
        )
    """)

    op.create_table(
        'api_definitions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('is_archived', sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
        schema='tenant_default',
    )
    op.create_table(
        'targets',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column(
            'type',
            sa.Enum(
                'RDP',
                'VNC',
                'TEAMVIEWER',
                'VNC_TAILSCALE',
                'VNC_WIREGUARD',
                'RDP_WIREGUARD',
                'RDP_TAILSCALE',
                'RDP_OPENVPN',
                name='targettype',
                schema='shared',
            ),
            nullable=False,
        ),
        sa.Column('host', sa.String(), nullable=True),
        sa.Column('port', sa.String(), nullable=True),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('password', sa.String(), nullable=True),
        sa.Column('vpn_config', sa.String(), nullable=True),
        sa.Column('vpn_username', sa.String(), nullable=True),
        sa.Column('vpn_password', sa.String(), nullable=True),
        sa.Column('width', sa.String(), nullable=False),
        sa.Column('height', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('is_archived', sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_table(
        'api_definition_versions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('api_definition_id', sa.UUID(), nullable=False),
        sa.Column('version_number', sa.String(), nullable=False),
        sa.Column(
            'parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column('prompt', sa.String(), nullable=False),
        sa.Column('prompt_cleanup', sa.String(), nullable=False),
        sa.Column(
            'response_example', postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ['api_definition_id'],
            ['tenant_default.api_definitions.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_table(
        'sessions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('target_id', sa.UUID(), nullable=False),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('state', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('is_archived', sa.Boolean(), nullable=True),
        sa.Column('archive_reason', sa.String(), nullable=True),
        sa.Column('last_job_time', sa.DateTime(), nullable=True),
        sa.Column('container_id', sa.String(), nullable=True),
        sa.Column('container_ip', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ['target_id'],
            ['tenant_default.targets.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_table(
        'jobs',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('target_id', sa.UUID(), nullable=False),
        sa.Column('session_id', sa.UUID(), nullable=True),
        sa.Column('api_name', sa.String(), nullable=True),
        sa.Column('api_definition_version_id', sa.UUID(), nullable=True),
        sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            'status',
            sa.Enum(
                'PENDING',
                'QUEUED',
                'RUNNING',
                'PAUSED',
                'SUCCESS',
                'ERROR',
                'CANCELED',
                name='jobstatus',
                schema='shared',
            ),
            nullable=True,
        ),
        sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('error', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('total_input_tokens', sa.Integer(), nullable=True),
        sa.Column('total_output_tokens', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['api_definition_version_id'],
            ['tenant_default.api_definition_versions.id'],
        ),
        sa.ForeignKeyConstraint(
            ['session_id'],
            ['tenant_default.sessions.id'],
        ),
        sa.ForeignKeyConstraint(
            ['target_id'],
            ['tenant_default.targets.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_table(
        'job_logs',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('job_id', sa.UUID(), nullable=True),
        sa.Column('timestamp', sa.DateTime(), nullable=True),
        sa.Column('log_type', sa.String(), nullable=True),
        sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            'content_trimmed', postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ['job_id'],
            ['tenant_default.jobs.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_table(
        'job_messages',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('job_id', sa.UUID(), nullable=False),
        sa.Column('sequence', sa.Integer(), nullable=False),
        sa.Column('role', sa.String(), nullable=False),
        sa.Column(
            'message_content', postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['job_id'], ['tenant_default.jobs.id'], ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id'),
        schema='tenant_default',
    )
    op.create_index(
        'ix_jobmessage_job_id_sequence',
        'job_messages',
        ['job_id', 'sequence'],
        unique=False,
        schema='tenant_default',
    )
    op.create_index(
        op.f('ix_tenant_job_messages_job_id'),
        'job_messages',
        ['job_id'],
        unique=False,
        schema='tenant_default',
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f('ix_tenant_job_messages_job_id'),
        table_name='job_messages',
        schema='tenant_default',
    )
    op.drop_index(
        'ix_jobmessage_job_id_sequence',
        table_name='job_messages',
        schema='tenant_default',
    )
    op.drop_table('job_messages', schema='tenant_default')
    op.drop_table('job_logs', schema='tenant_default')
    op.drop_table('jobs', schema='tenant_default')
    op.drop_table('sessions', schema='tenant_default')
    op.drop_table('api_definition_versions', schema='tenant_default')
    op.drop_table('targets', schema='tenant_default')
    op.drop_table('api_definitions', schema='tenant_default')
    op.drop_index(op.f('ix_shared_tenants_name'), table_name='tenants', schema='shared')
    op.drop_table('tenants', schema='shared')
    # ### end Alembic commands ###
