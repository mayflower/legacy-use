/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * AI API Gateway
 * API Gateway for AI-powered endpoints
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from './custom-axios';
export type APIDefinitionWithSchemaResponseExample = { [key: string]: unknown };

export type APIDefinitionWithSchemaResponseSchema = { [key: string]: unknown };

export interface APIDefinitionWithSchema {
  name: string;
  description: string;
  parameters?: Parameter[];
  response_example?: APIDefinitionWithSchemaResponseExample;
  is_archived?: boolean;
  response_schema: APIDefinitionWithSchemaResponseSchema;
}

/**
 * The tool to use to complete the action
 */
export type ActionStepTool = (typeof ActionStepTool)[keyof typeof ActionStepTool];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActionStepTool = {
  type: 'type',
  press_key: 'press_key',
  click: 'click',
  scroll_up: 'scroll_up',
  scroll_down: 'scroll_down',
  ui_not_as_expected: 'ui_not_as_expected',
  extract_tool: 'extract_tool',
} as const;

export interface ActionStep {
  /** A short title summing up the user intent for the action, e.g. "Open settings menu" */
  title: string;
  /** Describe the action the user took to complete the task, formulated as instruction for the operator. Replace concrete values, inputs and selections with {...} placeholders based on the parameters of the API call, in particular dates, names, texts, values, etc. */
  instruction: string;
  /** The tool to use to complete the action */
  tool: ActionStepTool;
}

export interface BodyAnalyzeVideoTeachingModeAnalyzeVideoPost {
  video: Blob;
}

/**
 * A single custom action with name and a chain of tools to execute.
 */
export interface CustomAction {
  /** The custom action name to execute (e.g., 'computer') */
  name: string;
  /** Chain of tools to execute */
  tools: CustomActionTool[];
}

/**
 * Parameters specific to the tool (e.g., "coordinate")
 */
export type CustomActionToolParameters = { [key: string]: unknown };

/**
 * A single tool that can be used in a custom action.
 */
export interface CustomActionTool {
  /** The tool name to execute (e.g., "computer") */
  name: string;
  /** Parameters specific to the tool (e.g., "coordinate") */
  parameters: CustomActionToolParameters;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type HttpExchangeLogContent = { [key: string]: unknown };

export interface HttpExchangeLog {
  id: string;
  job_id: string;
  timestamp: string;
  log_type?: string;
  content: HttpExchangeLogContent;
}

export type ImportApiDefinitionBodyResponseExample = { [key: string]: unknown };

export type ImportApiDefinitionBodyCustomActionsAnyOf = { [key: string]: CustomAction };

export type ImportApiDefinitionBodyCustomActions = ImportApiDefinitionBodyCustomActionsAnyOf | null;

export interface ImportApiDefinitionBody {
  name: string;
  description: string;
  parameters: Parameter[];
  prompt: string;
  prompt_cleanup: string;
  response_example: ImportApiDefinitionBodyResponseExample;
  custom_actions?: ImportApiDefinitionBodyCustomActions;
}

export interface ImportApiDefinitionRequest {
  api_definition: ImportApiDefinitionBody;
}

export type InputLogEntryDetails = { [key: string]: unknown };

/**
 * Model for individual input log entries
 */
export interface InputLogEntry {
  timestamp: string;
  session_id: string;
  source: string;
  action_type: string;
  details: InputLogEntryDetails;
}

export type JobSessionId = string | null;

export type JobParameters = { [key: string]: string | unknown[] };

export type JobResultAnyOf = { [key: string]: unknown };

export type JobResult = JobResultAnyOf | null;

export type JobError = string | null;

export type JobCompletedAt = string | null;

export type JobApiExchangesItem = { [key: string]: unknown };

export type JobApiDefinitionVersionId = string | null;

export type JobTotalInputTokens = number | null;

export type JobTotalOutputTokens = number | null;

export type JobDurationSeconds = number | null;

export interface Job {
  id?: string;
  target_id: string;
  session_id?: JobSessionId;
  api_name: string;
  parameters?: JobParameters;
  status?: JobStatus;
  result?: JobResult;
  error?: JobError;
  created_at?: string;
  updated_at?: string;
  completed_at?: JobCompletedAt;
  api_exchanges?: JobApiExchangesItem[];
  api_definition_version_id?: JobApiDefinitionVersionId;
  total_input_tokens?: JobTotalInputTokens;
  total_output_tokens?: JobTotalOutputTokens;
  duration_seconds?: JobDurationSeconds;
}

export type JobCreateParameters = { [key: string]: string | unknown[] };

export interface JobCreate {
  api_name: string;
  parameters?: JobCreateParameters;
  status?: JobStatus;
}

export interface JobLogEntry {
  id: string;
  job_id: string;
  timestamp: string;
  log_type: string;
  content: unknown;
}

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobStatus = {
  pending: 'pending',
  queued: 'queued',
  running: 'running',
  paused: 'paused',
  success: 'success',
  error: 'error',
  canceled: 'canceled',
} as const;

export type MakeResponseSchemaSpec = MakeResponseSchema[] | MakeResponseSchema | null;

export interface MakeResponseSchema {
  name: string;
  type: string;
  label: string;
  spec?: MakeResponseSchemaSpec;
}

export interface PaginatedJobsResponse {
  total_count: number;
  jobs: Job[];
}

export type ParameterDefault = string | unknown[] | null;

export interface Parameter {
  name: string;
  type: string;
  description: string;
  default?: ParameterDefault;
}

export type ProviderConfigurationCredentials = { [key: string]: string | null };

/**
 * Configuration for a VLM provider.
 */
export interface ProviderConfiguration {
  provider: string;
  name: string;
  default_model: string;
  available: boolean;
  description: string;
  credentials: ProviderConfigurationCredentials;
}

/**
 * Response model for providers endpoint.
 */
export interface ProvidersResponse {
  current_provider: string;
  providers: ProviderConfiguration[];
}

export type RecordingRequestFramerate = number | null;

export type RecordingRequestQuality = string | null;

export type RecordingRequestFormat = string | null;

/**
 * Request model for starting a recording
 */
export interface RecordingRequest {
  framerate?: RecordingRequestFramerate;
  quality?: RecordingRequestQuality;
  format?: RecordingRequestFormat;
}

export type RecordingResultResponseRecordingId = string | null;

export type RecordingResultResponseFileSizeBytes = number | null;

export type RecordingResultResponseDurationSeconds = number | null;

export type RecordingResultResponseInputLogs = InputLogEntry[] | null;

export interface RecordingResultResponse {
  status: RecordingStatus;
  message: string;
  recording_id?: RecordingResultResponseRecordingId;
  file_size_bytes?: RecordingResultResponseFileSizeBytes;
  duration_seconds?: RecordingResultResponseDurationSeconds;
  base64_video: string;
  input_logs?: RecordingResultResponseInputLogs;
}

export type RecordingStatus = (typeof RecordingStatus)[keyof typeof RecordingStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordingStatus = {
  started: 'started',
  stopped: 'stopped',
  completed: 'completed',
  recording: 'recording',
} as const;

export type RecordingStatusResponseRecordingId = string | null;

export type RecordingStatusResponseSessionId = string | null;

export type RecordingStatusResponseFilePath = string | null;

export type RecordingStatusResponseDurationSeconds = number | null;

export type RecordingStatusResponseStartTime = string | null;

export interface RecordingStatusResponse {
  status: RecordingStatus;
  message: string;
  recording_id?: RecordingStatusResponseRecordingId;
  session_id?: RecordingStatusResponseSessionId;
  file_path?: RecordingStatusResponseFilePath;
  duration_seconds?: RecordingStatusResponseDurationSeconds;
  start_time?: RecordingStatusResponseStartTime;
}

export type SessionDescription = string | null;

export type SessionContainerId = string | null;

export type SessionContainerIp = string | null;

export type SessionArchiveReason = string | null;

export type SessionLastJobTime = string | null;

export type SessionContainerStatusAnyOf = { [key: string]: unknown };

export type SessionContainerStatus = SessionContainerStatusAnyOf | null;

/**
 * Session model for API responses.
 */
export interface Session {
  id: string;
  name: string;
  description?: SessionDescription;
  target_id: string;
  status: string;
  state?: string;
  container_id?: SessionContainerId;
  container_ip?: SessionContainerIp;
  created_at: string;
  updated_at: string;
  is_archived?: boolean;
  archive_reason?: SessionArchiveReason;
  last_job_time?: SessionLastJobTime;
  container_status?: SessionContainerStatus;
}

export interface SessionContainerLogs {
  session_id: string;
  container_id: string;
  logs: string;
  lines_retrieved: number;
  max_lines_requested: number;
}

export type SessionCreateDescription = string | null;

/**
 * Session creation model.
 */
export interface SessionCreate {
  name: string;
  description?: SessionCreateDescription;
  target_id: string;
}

export type SessionUpdateName = string | null;

export type SessionUpdateDescription = string | null;

export type SessionUpdateStatus = string | null;

export type SessionUpdateState = string | null;

export type SessionUpdateContainerId = string | null;

export type SessionUpdateContainerIp = string | null;

/**
 * Session update model.
 */
export interface SessionUpdate {
  name?: SessionUpdateName;
  description?: SessionUpdateDescription;
  status?: SessionUpdateStatus;
  state?: SessionUpdateState;
  container_id?: SessionUpdateContainerId;
  container_ip?: SessionUpdateContainerIp;
}

export type TargetUsername = string | null;

export type TargetPort = number | null;

export type TargetVpnConfig = string | null;

export type TargetVpnUsername = string | null;

export type TargetVpnPassword = string | null;

export type TargetRdpParams = string | null;

export type TargetQueueStatus = string | null;

export type TargetBlockingJobsAnyOfItem = { [key: string]: unknown };

export type TargetBlockingJobs = TargetBlockingJobsAnyOfItem[] | null;

export type TargetHasBlockingJobs = boolean | null;

export type TargetBlockingJobsCount = number | null;

export type TargetHasActiveSession = boolean | null;

export type TargetHasInitializingSession = boolean | null;

export interface Target {
  id?: string;
  name: string;
  type: TargetType;
  host: string;
  username?: TargetUsername;
  password: string;
  port?: TargetPort;
  vpn_config?: TargetVpnConfig;
  vpn_username?: TargetVpnUsername;
  vpn_password?: TargetVpnPassword;
  width?: number;
  height?: number;
  created_at?: string;
  updated_at?: string;
  is_archived?: boolean;
  rdp_params?: TargetRdpParams;
  queue_status?: TargetQueueStatus;
  blocking_jobs?: TargetBlockingJobs;
  has_blocking_jobs?: TargetHasBlockingJobs;
  blocking_jobs_count?: TargetBlockingJobsCount;
  has_active_session?: TargetHasActiveSession;
  has_initializing_session?: TargetHasInitializingSession;
}

export type TargetCreateUsername = string | null;

export type TargetCreatePort = number | null;

export type TargetCreateVpnConfig = string | null;

export type TargetCreateVpnUsername = string | null;

export type TargetCreateVpnPassword = string | null;

export type TargetCreateRdpParams = string | null;

export interface TargetCreate {
  name: string;
  type: TargetType;
  host: string;
  username?: TargetCreateUsername;
  password: string;
  port?: TargetCreatePort;
  vpn_config?: TargetCreateVpnConfig;
  vpn_username?: TargetCreateVpnUsername;
  vpn_password?: TargetCreateVpnPassword;
  width?: number;
  height?: number;
  rdp_params?: TargetCreateRdpParams;
}

export type TargetType = (typeof TargetType)[keyof typeof TargetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TargetType = {
  rdp: 'rdp',
  vnc: 'vnc',
  teamviewer: 'teamviewer',
  'vnc+tailscale': 'vnc+tailscale',
  'vnc+wireguard': 'vnc+wireguard',
  rdp_wireguard: 'rdp_wireguard',
  'rdp+tailscale': 'rdp+tailscale',
  'rdp+openvpn': 'rdp+openvpn',
} as const;

export type TargetUpdateName = string | null;

export type TargetUpdateType = TargetType | null;

export type TargetUpdateHost = string | null;

export type TargetUpdateUsername = string | null;

export type TargetUpdatePassword = string | null;

export type TargetUpdatePort = number | null;

export type TargetUpdateVpnConfig = string | null;

export type TargetUpdateVpnUsername = string | null;

export type TargetUpdateVpnPassword = string | null;

export type TargetUpdateWidth = number | null;

export type TargetUpdateHeight = number | null;

export type TargetUpdateRdpParams = string | null;

export interface TargetUpdate {
  name?: TargetUpdateName;
  type?: TargetUpdateType;
  host?: TargetUpdateHost;
  username?: TargetUpdateUsername;
  password?: TargetUpdatePassword;
  port?: TargetUpdatePort;
  vpn_config?: TargetUpdateVpnConfig;
  vpn_username?: TargetUpdateVpnUsername;
  vpn_password?: TargetUpdateVpnPassword;
  width?: TargetUpdateWidth;
  height?: TargetUpdateHeight;
  rdp_params?: TargetUpdateRdpParams;
}

export type UpdateProviderRequestCredentials = { [key: string]: string };

/**
 * Request model for updating provider configuration.
 */
export interface UpdateProviderRequest {
  provider: string;
  credentials: UpdateProviderRequestCredentials;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Expected response from the automation
 */
export type VideoAnalysisResponseResponseExample = { [key: string]: unknown };

/**
 * Response model for video analysis
 */
export interface VideoAnalysisResponse {
  /** A short name for the automation */
  name: string;
  /** A short summary of the automation, remain high level */
  description: string;
  /** Describe the expected screen state, instruct the operator to get the system into the initial state. Then describe the actions the user took to complete the task in great detail, in particular which buttons or input fields are used, use the tools available to the model to describe the actions, follow the format of the HOW_TO_PROMPT.md file */
  actions: ActionStep[];
  /** Instructions to return the system to its original state */
  prompt_cleanup: string;
  /** Parameters and user input needed to run the automation another time with different values */
  parameters: Parameter[];
  /** Expected response from the automation */
  response_example: VideoAnalysisResponseResponseExample;
}

export type GetApiDefinitionsApiDefinitionsGetParams = {
  include_archived?: boolean;
};

export type UpdateApiDefinitionApiDefinitionsApiNamePut200 = { [key: string]: string };

export type ArchiveApiDefinitionApiDefinitionsApiNameDelete200 = { [key: string]: string };

export type ExportApiDefinitionApiDefinitionsApiNameExportGet200 = {
  [key: string]: { [key: string]: unknown };
};

export type GetApiDefinitionVersionsApiDefinitionsApiNameVersionsGet200Item = {
  [key: string]: unknown;
};

export type GetApiDefinitionVersionsApiDefinitionsApiNameVersionsGet200 = {
  [key: string]: GetApiDefinitionVersionsApiDefinitionsApiNameVersionsGet200Item[];
};

export type GetApiDefinitionVersionApiDefinitionsApiNameVersionsVersionIdGet200 = {
  [key: string]: { [key: string]: unknown };
};

export type ImportApiDefinitionApiDefinitionsImportPost200 = { [key: string]: string };

export type UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost200 = { [key: string]: string };

export type GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGet200 = {
  [key: string]: unknown;
};

export type AddCustomActionApiDefinitionsApiNameCustomActionsPost200 = { [key: string]: string };

export type ListCustomActionsApiDefinitionsApiNameCustomActionsGet200 = { [key: string]: unknown };

export type DeleteCustomActionApiDefinitionsApiNameCustomActionsActionNameDelete200 = {
  [key: string]: string;
};

export type ListTargetsTargetsGetParams = {
  include_archived?: boolean;
};

export type ListSessionsSessionsGetParams = {
  include_archived?: boolean;
};

export type CreateSessionSessionsPostParams = {
  get_or_create?: boolean;
};

export type ExecuteApiOnSessionSessionsSessionIdExecutePostBody = { [key: string]: unknown };

export type ExecuteApiOnSessionSessionsSessionIdExecutePost200 = { [key: string]: unknown };

export type UpdateSessionStateSessionsSessionIdStatePutParams = {
  state: string;
};

export type GetSessionContainerLogsSessionsSessionIdContainerLogsGetParams = {
  lines?: number;
};

export type ListAllJobsJobsGetParams = {
  limit?: number;
  offset?: number;
  status?: string | null;
  target_id?: string | null;
  api_name?: string | null;
};

export type ListTargetJobsTargetsTargetIdJobsGetParams = {
  limit?: number;
  offset?: number;
};

export type ResolveJobTargetsTargetIdJobsJobIdResolvePostBody = { [key: string]: unknown };

export type UpdateProviderSettingsSettingsProvidersPost200 = { [key: string]: string };

export type GetTenantTenantsGet200 = { [key: string]: string | null };

export type CreateNewTenantTenantsPostParams = {
  name: string;
  schema: string;
  host: string;
};

export type CreateNewTenantTenantsPost200 = { [key: string]: string };

/**
 * Get all available API definitions.
 * @summary Get Api Definitions
 */
export const getApiDefinitionsApiDefinitionsGet = (
  params?: GetApiDefinitionsApiDefinitionsGetParams,
) => {
  return customInstance<APIDefinitionWithSchema[]>({
    url: `/api/definitions`,
    method: 'GET',
    params,
  });
};

/**
 * Get a specific API definition by name.
 * @summary Get Api Definition
 */
export const getApiDefinitionApiDefinitionsApiNameGet = (apiName: string) => {
  return customInstance<APIDefinitionWithSchema>({
    url: `/api/definitions/${apiName}`,
    method: 'GET',
  });
};

/**
 * Update an API definition.
 * @summary Update Api Definition
 */
export const updateApiDefinitionApiDefinitionsApiNamePut = (
  apiName: string,
  importApiDefinitionRequest: ImportApiDefinitionRequest,
) => {
  return customInstance<UpdateApiDefinitionApiDefinitionsApiNamePut200>({
    url: `/api/definitions/${apiName}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: importApiDefinitionRequest,
  });
};

/**
 * Archive an API definition (soft delete).
 * @summary Archive Api Definition
 */
export const archiveApiDefinitionApiDefinitionsApiNameDelete = (apiName: string) => {
  return customInstance<ArchiveApiDefinitionApiDefinitionsApiNameDelete200>({
    url: `/api/definitions/${apiName}`,
    method: 'DELETE',
  });
};

/**
 * Return response schema in make.com compatible format.
 * @summary Make Schema
 */
export const makeSchemaApiDefinitionsApiNameMakeSchemaGet = (apiName: string) => {
  return customInstance<MakeResponseSchema[]>({
    url: `/api/definitions/${apiName}/make_schema`,
    method: 'GET',
  });
};

/**
 * Get a specific API definition in its raw format for export/backup purposes.
 * @summary Export Api Definition
 */
export const exportApiDefinitionApiDefinitionsApiNameExportGet = (apiName: string) => {
  return customInstance<ExportApiDefinitionApiDefinitionsApiNameExportGet200>({
    url: `/api/definitions/${apiName}/export`,
    method: 'GET',
  });
};

/**
 * Get all versions of a specific API definition.
 * @summary Get Api Definition Versions
 */
export const getApiDefinitionVersionsApiDefinitionsApiNameVersionsGet = (apiName: string) => {
  return customInstance<GetApiDefinitionVersionsApiDefinitionsApiNameVersionsGet200>({
    url: `/api/definitions/${apiName}/versions`,
    method: 'GET',
  });
};

/**
 * Get a specific version of an API definition.
 * @summary Get Api Definition Version
 */
export const getApiDefinitionVersionApiDefinitionsApiNameVersionsVersionIdGet = (
  apiName: string,
  versionId: string,
) => {
  return customInstance<GetApiDefinitionVersionApiDefinitionsApiNameVersionsVersionIdGet200>({
    url: `/api/definitions/${apiName}/versions/${versionId}`,
    method: 'GET',
  });
};

/**
 * Import an API definition from a JSON file.
 * @summary Import Api Definition
 */
export const importApiDefinitionApiDefinitionsImportPost = (
  importApiDefinitionRequest: ImportApiDefinitionRequest,
) => {
  return customInstance<ImportApiDefinitionApiDefinitionsImportPost200>({
    url: `/api/definitions/import`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: importApiDefinitionRequest,
  });
};

/**
 * Unarchive an API definition.
 * @summary Unarchive Api Definition
 */
export const unarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost = (apiName: string) => {
  return customInstance<UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost200>({
    url: `/api/definitions/${apiName}/unarchive`,
    method: 'POST',
  });
};

/**
 * Get metadata for a specific API definition, including archived status.
 * @summary Get Api Definition Metadata
 */
export const getApiDefinitionMetadataApiDefinitionsApiNameMetadataGet = (apiName: string) => {
  return customInstance<GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGet200>({
    url: `/api/definitions/${apiName}/metadata`,
    method: 'GET',
  });
};

/**
 * Add a custom action to the API definition
 * @summary Add Custom Action
 */
export const addCustomActionApiDefinitionsApiNameCustomActionsPost = (
  apiName: string,
  customAction: CustomAction,
) => {
  return customInstance<AddCustomActionApiDefinitionsApiNameCustomActionsPost200>({
    url: `/api/definitions/${apiName}/custom_actions`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: customAction,
  });
};

/**
 * List custom actions for the latest version of an API definition.
 * @summary List Custom Actions
 */
export const listCustomActionsApiDefinitionsApiNameCustomActionsGet = (apiName: string) => {
  return customInstance<ListCustomActionsApiDefinitionsApiNameCustomActionsGet200>({
    url: `/api/definitions/${apiName}/custom_actions`,
    method: 'GET',
  });
};

/**
 * Delete a custom action by name from the latest version of an API definition.
 * @summary Delete Custom Action
 */
export const deleteCustomActionApiDefinitionsApiNameCustomActionsActionNameDelete = (
  apiName: string,
  actionName: string,
) => {
  return customInstance<DeleteCustomActionApiDefinitionsApiNameCustomActionsActionNameDelete200>({
    url: `/api/definitions/${apiName}/custom_actions/${actionName}`,
    method: 'DELETE',
  });
};

/**
 * Analyze a video recording and generate an API definition for automation.

This endpoint accepts a video file upload, analyzes it using Google Vertex Gemini Pro,
and returns a structured API definition that can be used to automate the workflow
shown in the video.
 * @summary Analyze Video
 */
export const analyzeVideoTeachingModeAnalyzeVideoPost = (
  bodyAnalyzeVideoTeachingModeAnalyzeVideoPost: BodyAnalyzeVideoTeachingModeAnalyzeVideoPost,
) => {
  const formData = new FormData();
  formData.append(`video`, bodyAnalyzeVideoTeachingModeAnalyzeVideoPost.video);

  return customInstance<VideoAnalysisResponse>({
    url: `/teaching-mode/analyze-video`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

/**
 * List all available targets.
 * @summary List Targets
 */
export const listTargetsTargetsGet = (params?: ListTargetsTargetsGetParams) => {
  return customInstance<Target[]>({ url: `/targets/`, method: 'GET', params });
};

/**
 * Create a new target.
 * @summary Create Target
 */
export const createTargetTargetsPost = (targetCreate: TargetCreate) => {
  return customInstance<Target>({
    url: `/targets/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: targetCreate,
  });
};

/**
 * Get details of a specific target.
 * @summary Get Target
 */
export const getTargetTargetsTargetIdGet = (targetId: string) => {
  return customInstance<Target>({ url: `/targets/${targetId}`, method: 'GET' });
};

/**
 * Update a target's configuration.
 * @summary Update Target
 */
export const updateTargetTargetsTargetIdPut = (targetId: string, targetUpdate: TargetUpdate) => {
  return customInstance<Target>({
    url: `/targets/${targetId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: targetUpdate,
  });
};

/**
 * Archive a target (soft delete).
 * @summary Delete Target
 */
export const deleteTargetTargetsTargetIdDelete = (targetId: string) => {
  return customInstance<unknown>({ url: `/targets/${targetId}`, method: 'DELETE' });
};

/**
 * Permanently delete a target (hard delete).
 * @summary Hard Delete Target
 */
export const hardDeleteTargetTargetsTargetIdHardDelete = (targetId: string) => {
  return customInstance<unknown>({ url: `/targets/${targetId}/hard`, method: 'DELETE' });
};

/**
 * Unarchive a target.
 * @summary Unarchive Target
 */
export const unarchiveTargetTargetsTargetIdUnarchivePost = (targetId: string) => {
  return customInstance<unknown>({ url: `/targets/${targetId}/unarchive`, method: 'POST' });
};

/**
 * List all active sessions.
 * @summary List Sessions
 */
export const listSessionsSessionsGet = (params?: ListSessionsSessionsGetParams) => {
  return customInstance<Session[]>({ url: `/sessions/`, method: 'GET', params });
};

/**
 * Create a new session for a target.

If get_or_create is True, will return an existing ready session for the target if one exists.
 * @summary Create Session
 */
export const createSessionSessionsPost = (
  sessionCreate: SessionCreate,
  params?: CreateSessionSessionsPostParams,
) => {
  return customInstance<Session>({
    url: `/sessions/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: sessionCreate,
    params,
  });
};

/**
 * Get details of a specific session.
 * @summary Get Session
 */
export const getSessionSessionsSessionIdGet = (sessionId: string) => {
  return customInstance<unknown>({ url: `/sessions/${sessionId}`, method: 'GET' });
};

/**
 * Update a session's configuration.
 * @summary Update Session
 */
export const updateSessionSessionsSessionIdPut = (
  sessionId: string,
  sessionUpdate: SessionUpdate,
) => {
  return customInstance<unknown>({
    url: `/sessions/${sessionId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: sessionUpdate,
  });
};

/**
 * Archive a session.
 * @summary Delete Session
 */
export const deleteSessionSessionsSessionIdDelete = (sessionId: string) => {
  return customInstance<unknown>({ url: `/sessions/${sessionId}`, method: 'DELETE' });
};

/**
 * Permanently delete a session and stop its container (hard delete).
 * @summary Hard Delete Session
 */
export const hardDeleteSessionSessionsSessionIdHardDelete = (sessionId: string) => {
  return customInstance<unknown>({ url: `/sessions/${sessionId}/hard`, method: 'DELETE' });
};

/**
 * Execute an API call on the session's container.

This endpoint forwards API requests to the container running the session.
 * @summary Execute Api On Session
 */
export const executeApiOnSessionSessionsSessionIdExecutePost = (
  sessionId: string,
  executeApiOnSessionSessionsSessionIdExecutePostBody: ExecuteApiOnSessionSessionsSessionIdExecutePostBody,
) => {
  return customInstance<ExecuteApiOnSessionSessionsSessionIdExecutePost200>({
    url: `/sessions/${sessionId}/execute`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: executeApiOnSessionSessionsSessionIdExecutePostBody,
  });
};

/**
 * Proxy VNC viewer requests to the container running the session.

This endpoint forwards VNC viewer requests to the container's VNC server running on port 6080.
 * @summary Proxy Vnc
 */
export const proxyVncSessionsSessionIdVncPathGet = (sessionId: string, path: string) => {
  return customInstance<unknown>({ url: `/sessions/${sessionId}/vnc/${path}`, method: 'GET' });
};

/**
 * Update the state of a session.
 * @summary Update Session State
 */
export const updateSessionStateSessionsSessionIdStatePut = (
  sessionId: string,
  params: UpdateSessionStateSessionsSessionIdStatePutParams,
) => {
  return customInstance<unknown>({ url: `/sessions/${sessionId}/state`, method: 'PUT', params });
};

/**
 * Start screen recording on a session
 * @summary Start Session Recording
 */
export const startSessionRecordingSessionsSessionIdRecordingStartPost = (
  sessionId: string,
  recordingRequest: RecordingRequest,
) => {
  return customInstance<RecordingStatusResponse>({
    url: `/sessions/${sessionId}/recording/start`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: recordingRequest,
  });
};

/**
 * Stop screen recording on a session and get the video
 * @summary Stop Session Recording
 */
export const stopSessionRecordingSessionsSessionIdRecordingStopPost = (sessionId: string) => {
  return customInstance<RecordingResultResponse>({
    url: `/sessions/${sessionId}/recording/stop`,
    method: 'POST',
  });
};

/**
 * Get recording status from a session
 * @summary Get Session Recording Status
 */
export const getSessionRecordingStatusSessionsSessionIdRecordingStatusGet = (sessionId: string) => {
  return customInstance<RecordingStatusResponse>({
    url: `/sessions/${sessionId}/recording/status`,
    method: 'GET',
  });
};

/**
 * Get Docker logs for a session's container.
 * @summary Get Session Container Logs
 */
export const getSessionContainerLogsSessionsSessionIdContainerLogsGet = (
  sessionId: string,
  params?: GetSessionContainerLogsSessionsSessionIdContainerLogsGetParams,
) => {
  return customInstance<SessionContainerLogs>({
    url: `/sessions/${sessionId}/container_logs`,
    method: 'GET',
    params,
  });
};

/**
 * List all jobs across all targets with pagination and filtering options.
 * @summary List All Jobs
 */
export const listAllJobsJobsGet = (params?: ListAllJobsJobsGetParams) => {
  return customInstance<PaginatedJobsResponse>({ url: `/jobs/`, method: 'GET', params });
};

/**
 * List all jobs for a specific target with pagination.
 * @summary List Target Jobs
 */
export const listTargetJobsTargetsTargetIdJobsGet = (
  targetId: string,
  params?: ListTargetJobsTargetsTargetIdJobsGetParams,
) => {
  return customInstance<Job[]>({ url: `/targets/${targetId}/jobs/`, method: 'GET', params });
};

/**
 * Create a new job for a target.

The endpoint will return immediately after adding the job to the queue.

Note: Jobs have a token usage limit of 15,000 tokens (combined input and output).
Jobs exceeding this limit will be automatically terminated.
 * @summary Create Job
 */
export const createJobTargetsTargetIdJobsPost = (targetId: string, jobCreate: JobCreate) => {
  return customInstance<Job>({
    url: `/targets/${targetId}/jobs/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: jobCreate,
  });
};

/**
 * Get details of a specific job.
 * @summary Get Job
 */
export const getJobTargetsTargetIdJobsJobIdGet = (targetId: string, jobId: string) => {
  return customInstance<Job>({ url: `/targets/${targetId}/jobs/${jobId}`, method: 'GET' });
};

/**
 * Interrupt a running, queued, or pending job.
 * @summary Interrupt Job
 */
export const interruptJobTargetsTargetIdJobsJobIdInterruptPost = (
  targetId: string,
  jobId: string,
) => {
  return customInstance<unknown>({
    url: `/targets/${targetId}/jobs/${jobId}/interrupt/`,
    method: 'POST',
  });
};

/**
 * Cancel a job and mark its status as 'canceled'.
 * @summary Cancel Job
 */
export const cancelJobTargetsTargetIdJobsJobIdCancelPost = (targetId: string, jobId: string) => {
  return customInstance<unknown>({
    url: `/targets/${targetId}/jobs/${jobId}/cancel/`,
    method: 'POST',
  });
};

/**
 * Get logs for a specific job.
 * @summary Get Job Logs
 */
export const getJobLogsTargetsTargetIdJobsJobIdLogsGet = (targetId: string, jobId: string) => {
  return customInstance<JobLogEntry[]>({
    url: `/targets/${targetId}/jobs/${jobId}/logs/`,
    method: 'GET',
  });
};

/**
 * Get HTTP exchange logs for a specific job.

Args:
    target_id: ID of the target
    job_id: ID of the job
 * @summary Get Job Http Exchanges
 */
export const getJobHttpExchangesTargetsTargetIdJobsJobIdHttpExchangesGet = (
  targetId: string,
  jobId: string,
) => {
  return customInstance<HttpExchangeLog[]>({
    url: `/targets/${targetId}/jobs/${jobId}/http_exchanges/`,
    method: 'GET',
  });
};

/**
 * Resolve a job that's in error or paused state.

This endpoint allows setting a result for a job and marking it as successful.
If all error/paused jobs for this target are resolved, the queue will automatically resume.
 * @summary Resolve Job
 */
export const resolveJobTargetsTargetIdJobsJobIdResolvePost = (
  targetId: string,
  jobId: string,
  resolveJobTargetsTargetIdJobsJobIdResolvePostBody: ResolveJobTargetsTargetIdJobsJobIdResolvePostBody,
) => {
  return customInstance<unknown>({
    url: `/targets/${targetId}/jobs/${jobId}/resolve/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: resolveJobTargetsTargetIdJobsJobIdResolvePostBody,
  });
};

/**
 * Resumes a paused or error job by setting its status to queued.
 * @summary Resume Job
 */
export const resumeJobTargetsTargetIdJobsJobIdResumePost = (targetId: string, jobId: string) => {
  return customInstance<Job>({ url: `/targets/${targetId}/jobs/${jobId}/resume/`, method: 'POST' });
};

/**
 * Get available VLM providers and their configurations.
 * @summary Get Providers
 */
export const getProvidersSettingsProvidersGet = () => {
  return customInstance<ProvidersResponse>({ url: `/settings/providers`, method: 'GET' });
};

/**
 * Update provider configuration and set as active provider.
 * @summary Update Provider Settings
 */
export const updateProviderSettingsSettingsProvidersPost = (
  updateProviderRequest: UpdateProviderRequest,
) => {
  return customInstance<UpdateProviderSettingsSettingsProvidersPost200>({
    url: `/settings/providers`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: updateProviderRequest,
  });
};

/**
 * @summary Scalar Html
 */
export const scalarHtmlSpecsGet = () => {
  return customInstance<unknown>({ url: `/specs/`, method: 'GET' });
};

/**
 * Get API specifications in OpenAPI format.

Returns all active API definitions from the database as OpenAPI compatible specifications.
 * @summary Get Openapi Specs
 */
export const getOpenapiSpecsSpecsOpenapiJsonGet = () => {
  return customInstance<unknown>({ url: `/specs/openapi.json`, method: 'GET' });
};

/**
 * Get all tools for a given group.
 * @summary Get Tools Group
 */
export const getToolsGroupToolsGroupGroupNameGet = (groupName: string) => {
  return customInstance<unknown>({ url: `/tools/group/${groupName}`, method: 'GET' });
};

/**
 * Get all keys.
 * @summary Get Keys
 */
export const getKeysToolsKeysGet = () => {
  return customInstance<unknown>({ url: `/tools/keys`, method: 'GET' });
};

/**
 * Get current database connection pool status.
 * @summary Get Database Pool Status
 */
export const getDatabasePoolStatusHealthDbGet = () => {
  return customInstance<unknown>({ url: `/health/db`, method: 'GET' });
};

/**
 * @summary Get Tenant
 */
export const getTenantTenantsGet = () => {
  return customInstance<GetTenantTenantsGet200>({ url: `/tenants/`, method: 'GET' });
};

/**
 * @summary Create New Tenant
 */
export const createNewTenantTenantsPost = (params: CreateNewTenantTenantsPostParams) => {
  return customInstance<CreateNewTenantTenantsPost200>({
    url: `/tenants/`,
    method: 'POST',
    params,
  });
};

/**
 * Root endpoint.
 * @summary Root
 */
export const rootGet = () => {
  return customInstance<unknown>({ url: `/`, method: 'GET' });
};

export type GetApiDefinitionsApiDefinitionsGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionsApiDefinitionsGet>>
>;
export type GetApiDefinitionApiDefinitionsApiNameGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionApiDefinitionsApiNameGet>>
>;
export type UpdateApiDefinitionApiDefinitionsApiNamePutResult = NonNullable<
  Awaited<ReturnType<typeof updateApiDefinitionApiDefinitionsApiNamePut>>
>;
export type ArchiveApiDefinitionApiDefinitionsApiNameDeleteResult = NonNullable<
  Awaited<ReturnType<typeof archiveApiDefinitionApiDefinitionsApiNameDelete>>
>;
export type MakeSchemaApiDefinitionsApiNameMakeSchemaGetResult = NonNullable<
  Awaited<ReturnType<typeof makeSchemaApiDefinitionsApiNameMakeSchemaGet>>
>;
export type ExportApiDefinitionApiDefinitionsApiNameExportGetResult = NonNullable<
  Awaited<ReturnType<typeof exportApiDefinitionApiDefinitionsApiNameExportGet>>
>;
export type GetApiDefinitionVersionsApiDefinitionsApiNameVersionsGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionVersionsApiDefinitionsApiNameVersionsGet>>
>;
export type GetApiDefinitionVersionApiDefinitionsApiNameVersionsVersionIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionVersionApiDefinitionsApiNameVersionsVersionIdGet>>
>;
export type ImportApiDefinitionApiDefinitionsImportPostResult = NonNullable<
  Awaited<ReturnType<typeof importApiDefinitionApiDefinitionsImportPost>>
>;
export type UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePostResult = NonNullable<
  Awaited<ReturnType<typeof unarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost>>
>;
export type GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionMetadataApiDefinitionsApiNameMetadataGet>>
>;
export type AddCustomActionApiDefinitionsApiNameCustomActionsPostResult = NonNullable<
  Awaited<ReturnType<typeof addCustomActionApiDefinitionsApiNameCustomActionsPost>>
>;
export type ListCustomActionsApiDefinitionsApiNameCustomActionsGetResult = NonNullable<
  Awaited<ReturnType<typeof listCustomActionsApiDefinitionsApiNameCustomActionsGet>>
>;
export type DeleteCustomActionApiDefinitionsApiNameCustomActionsActionNameDeleteResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteCustomActionApiDefinitionsApiNameCustomActionsActionNameDelete>>
  >;
export type AnalyzeVideoTeachingModeAnalyzeVideoPostResult = NonNullable<
  Awaited<ReturnType<typeof analyzeVideoTeachingModeAnalyzeVideoPost>>
>;
export type ListTargetsTargetsGetResult = NonNullable<
  Awaited<ReturnType<typeof listTargetsTargetsGet>>
>;
export type CreateTargetTargetsPostResult = NonNullable<
  Awaited<ReturnType<typeof createTargetTargetsPost>>
>;
export type GetTargetTargetsTargetIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getTargetTargetsTargetIdGet>>
>;
export type UpdateTargetTargetsTargetIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateTargetTargetsTargetIdPut>>
>;
export type DeleteTargetTargetsTargetIdDeleteResult = NonNullable<
  Awaited<ReturnType<typeof deleteTargetTargetsTargetIdDelete>>
>;
export type HardDeleteTargetTargetsTargetIdHardDeleteResult = NonNullable<
  Awaited<ReturnType<typeof hardDeleteTargetTargetsTargetIdHardDelete>>
>;
export type UnarchiveTargetTargetsTargetIdUnarchivePostResult = NonNullable<
  Awaited<ReturnType<typeof unarchiveTargetTargetsTargetIdUnarchivePost>>
>;
export type ListSessionsSessionsGetResult = NonNullable<
  Awaited<ReturnType<typeof listSessionsSessionsGet>>
>;
export type CreateSessionSessionsPostResult = NonNullable<
  Awaited<ReturnType<typeof createSessionSessionsPost>>
>;
export type GetSessionSessionsSessionIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getSessionSessionsSessionIdGet>>
>;
export type UpdateSessionSessionsSessionIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateSessionSessionsSessionIdPut>>
>;
export type DeleteSessionSessionsSessionIdDeleteResult = NonNullable<
  Awaited<ReturnType<typeof deleteSessionSessionsSessionIdDelete>>
>;
export type HardDeleteSessionSessionsSessionIdHardDeleteResult = NonNullable<
  Awaited<ReturnType<typeof hardDeleteSessionSessionsSessionIdHardDelete>>
>;
export type ExecuteApiOnSessionSessionsSessionIdExecutePostResult = NonNullable<
  Awaited<ReturnType<typeof executeApiOnSessionSessionsSessionIdExecutePost>>
>;
export type ProxyVncSessionsSessionIdVncPathGetResult = NonNullable<
  Awaited<ReturnType<typeof proxyVncSessionsSessionIdVncPathGet>>
>;
export type UpdateSessionStateSessionsSessionIdStatePutResult = NonNullable<
  Awaited<ReturnType<typeof updateSessionStateSessionsSessionIdStatePut>>
>;
export type StartSessionRecordingSessionsSessionIdRecordingStartPostResult = NonNullable<
  Awaited<ReturnType<typeof startSessionRecordingSessionsSessionIdRecordingStartPost>>
>;
export type StopSessionRecordingSessionsSessionIdRecordingStopPostResult = NonNullable<
  Awaited<ReturnType<typeof stopSessionRecordingSessionsSessionIdRecordingStopPost>>
>;
export type GetSessionRecordingStatusSessionsSessionIdRecordingStatusGetResult = NonNullable<
  Awaited<ReturnType<typeof getSessionRecordingStatusSessionsSessionIdRecordingStatusGet>>
>;
export type GetSessionContainerLogsSessionsSessionIdContainerLogsGetResult = NonNullable<
  Awaited<ReturnType<typeof getSessionContainerLogsSessionsSessionIdContainerLogsGet>>
>;
export type ListAllJobsJobsGetResult = NonNullable<Awaited<ReturnType<typeof listAllJobsJobsGet>>>;
export type ListTargetJobsTargetsTargetIdJobsGetResult = NonNullable<
  Awaited<ReturnType<typeof listTargetJobsTargetsTargetIdJobsGet>>
>;
export type CreateJobTargetsTargetIdJobsPostResult = NonNullable<
  Awaited<ReturnType<typeof createJobTargetsTargetIdJobsPost>>
>;
export type GetJobTargetsTargetIdJobsJobIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getJobTargetsTargetIdJobsJobIdGet>>
>;
export type InterruptJobTargetsTargetIdJobsJobIdInterruptPostResult = NonNullable<
  Awaited<ReturnType<typeof interruptJobTargetsTargetIdJobsJobIdInterruptPost>>
>;
export type CancelJobTargetsTargetIdJobsJobIdCancelPostResult = NonNullable<
  Awaited<ReturnType<typeof cancelJobTargetsTargetIdJobsJobIdCancelPost>>
>;
export type GetJobLogsTargetsTargetIdJobsJobIdLogsGetResult = NonNullable<
  Awaited<ReturnType<typeof getJobLogsTargetsTargetIdJobsJobIdLogsGet>>
>;
export type GetJobHttpExchangesTargetsTargetIdJobsJobIdHttpExchangesGetResult = NonNullable<
  Awaited<ReturnType<typeof getJobHttpExchangesTargetsTargetIdJobsJobIdHttpExchangesGet>>
>;
export type ResolveJobTargetsTargetIdJobsJobIdResolvePostResult = NonNullable<
  Awaited<ReturnType<typeof resolveJobTargetsTargetIdJobsJobIdResolvePost>>
>;
export type ResumeJobTargetsTargetIdJobsJobIdResumePostResult = NonNullable<
  Awaited<ReturnType<typeof resumeJobTargetsTargetIdJobsJobIdResumePost>>
>;
export type GetProvidersSettingsProvidersGetResult = NonNullable<
  Awaited<ReturnType<typeof getProvidersSettingsProvidersGet>>
>;
export type UpdateProviderSettingsSettingsProvidersPostResult = NonNullable<
  Awaited<ReturnType<typeof updateProviderSettingsSettingsProvidersPost>>
>;
export type ScalarHtmlSpecsGetResult = NonNullable<Awaited<ReturnType<typeof scalarHtmlSpecsGet>>>;
export type GetOpenapiSpecsSpecsOpenapiJsonGetResult = NonNullable<
  Awaited<ReturnType<typeof getOpenapiSpecsSpecsOpenapiJsonGet>>
>;
export type GetToolsGroupToolsGroupGroupNameGetResult = NonNullable<
  Awaited<ReturnType<typeof getToolsGroupToolsGroupGroupNameGet>>
>;
export type GetKeysToolsKeysGetResult = NonNullable<
  Awaited<ReturnType<typeof getKeysToolsKeysGet>>
>;
export type GetDatabasePoolStatusHealthDbGetResult = NonNullable<
  Awaited<ReturnType<typeof getDatabasePoolStatusHealthDbGet>>
>;
export type GetTenantTenantsGetResult = NonNullable<
  Awaited<ReturnType<typeof getTenantTenantsGet>>
>;
export type CreateNewTenantTenantsPostResult = NonNullable<
  Awaited<ReturnType<typeof createNewTenantTenantsPost>>
>;
export type RootGetResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>;
